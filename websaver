#!/usr/bin/env node

var async = require('async');
var path = require('path');

var Saver = require('./lib/saver');

function printUsage() {
  console.log('Usage: websaver <COMMAND> [OPTIONS...]');
  console.log('');
  console.log('  Download page to local directory:');
  console.log('       websaver download <page_url> <output_dir> [--force] [--fetch-only]');
  console.log('');
  console.log('  Update local directory:');
  console.log('       websaver update <output_dir> [--force] [--fetch-only]');
  console.log('');
  console.log('');
  console.log('  Add page to download list:');
  console.log('       websaver add-page <page_url> <output_dir>');
  console.log('');
  console.log('  Enable downloading of page:');
  console.log('       websaver enable-page <page_url> <output_dir>');
  console.log('');
  console.log('  Disable downloading of page:');
  console.log('       websaver disable-page <page_url> <output_dir>');
  console.log('');
  console.log('');
  console.log('  Download images:');
  console.log('       websaver download-image <page_url> <output_dir> [SELECTOR]');
  console.log('');
  console.log('  Download video (using youtube-dl):');
  console.log('       websaver download-video <page_url> <output_dir>');
  console.log('');
  console.log('');
  console.log('  Run script:');
  console.log('       websaver run-script <SCRIPT-FILE> <page_url> <output_dir>');
  console.log('');
}

if (process.argv.length < 3) {
  printUsage();
  process.exit();
  return;
}

process.on('SIGINT', function() {
  console.log("\nCaught interrupt signal");
  process.exit();
});

var options = {};
for (var i = 0; i < process.argv.length; i++) {
  if (process.argv[i] == '--force') {
    options.force = true;
  } else if (process.argv[i] == '--fetch-only') {
    options.fetch_only = true;
  } else if (process.argv[i] == '--verbose') {
    options.verbose = true;
  }
}

var isHttpUrl = function(string) {
  var pattern = /^((http|https):\/\/)/;
  return pattern.test(string);
}

var handlers = {};

handlers.download = function(options, callback) {
  var saver = new Saver(options);
  var state = saver.loadStateSync(options.output_dir);
  if (!options.force && state != null) {
    console.log('Warning: State file exists in output directory. ' +
      'Append --force to override/overwrite this.');
    return callback();
  }
  var output_dir_name = path.basename(options.output_dir);
  var parent_dir = path.resolve(options.output_dir, '..');

  var parent_saver = new Saver({ output_dir: parent_dir, save_state_on_exit: false });
  parent_saver.updateStateData(page_url, { output_dir: output_dir_name });
  parent_saver.saveStateSync(parent_dir);

  saver.on('exit', function(err) {
    var parent_saver = new Saver({ output_dir: parent_dir, save_state_on_exit: false });
    if (err) {
      parent_saver.updateStateData(page_url, {
        output_dir: output_dir_name,
        done: false,
        last_update: new Date() 
      });
    } else {
      parent_saver.updateStateData(page_url, {
        output_dir: output_dir_name,
        done: true,
        last_update: new Date() 
      });
    }
    parent_saver.saveStateSync(parent_dir);
  });

  saver.start(options, callback);
}

handlers.update = function(options, callback) {
  // options.save_state_on_exit = false;
  var saver = new Saver(options);
  var state = saver.loadStateSync(options.output_dir);
  if (state == null) {
    console.log('State file doesn\'t exist');
    return callback();
  }
  var page_url = saver.getStateData('url');
  if (page_url) {
    if (page_url == '') {
      console.log('Error: "url" field left empty');
      return callback();
    }
    console.log('Update from URL: ' + page_url);
    options.page_url = page_url;
    saver.on('exit', function(err) {
      // update state file in parent directory
      var output_dir_name = path.basename(options.output_dir);
      var parent_dir = path.resolve(options.output_dir, '..');
      var parent_saver = new Saver({ output_dir: parent_dir });
      if (err) {
        parent_saver.updateStateData(page_url, {
          output_dir: output_dir_name,
          done: false,
          last_update: new Date() 
        });  
      } else {
        parent_saver.updateStateData(page_url, {
          output_dir: output_dir_name,
          done: true,
          last_update: new Date() 
        });
      }  
      parent_saver.saveStateSync(parent_dir);
      parent_saver.exit();
    });
    saver.start(options, callback);
  } else {
    var update_queue = [];
    for (var prop in state) {
      if (isHttpUrl(prop) && typeof state[prop] == 'object') {
        var page = state[prop];
        var update_page_url = prop;
        var update_output_dir = page.output_dir;
        var done = page.done || false;
        var ignore = page.ignore || false;
        if ((options.force || !done) && !ignore 
          && typeof update_output_dir == 'string' && update_output_dir != '') {
          update_queue.push({
            page_url: update_page_url,
            output_dir: options.output_dir + '/' + update_output_dir
          });
        }
      }
    }
    // console.log(update_queue);
    var total = update_queue.length;
    var current = 0;
    async.eachSeries(update_queue, function(update_item, cb) {
      var update_err = null;
      var saver_options = {
        page_url: update_item.page_url,
        output_dir: update_item.output_dir,
        update: true
      };
      current++;
      console.log('[' + current + '/' + total + ']', 'Update: ' + update_item.page_url);
      // saver for processing each download item
      var child_saver = new Saver(saver_options);
      child_saver.on('exit', function(err) {
        if (options.verbose) {
          console.log('Saver exited: ' + update_item.page_url);
        }
        // saver for processing parent state file
        var output_dir_name = path.basename(update_item.output_dir);
        if (err) {
          if (options.verbose) {
            console.log('Child saver exited with error');
          }
          saver.updateStateData(update_item.page_url, {
            output_dir: output_dir_name,
            done: false,
            last_update: new Date() 
          });  
        } else {
          if (options.verbose) {
            console.log('Child saver exited with success');
          }
          saver.updateStateData(update_item.page_url, {
            output_dir: output_dir_name,
            done: true,
            last_update: new Date() 
          });
        }            
        saver.saveStateSync(options.output_dir);
        if (!update_err) {
          update_err = err;
          cb(err);
        }
      });
      child_saver.start(saver_options, function(err) {
        if (err) {
          if (!update_err) {
            update_err = err;
            return cb(err);
          }
        }
      });
    }, function(err) {
      if (err) return callback(err);
      callback();
    });
  }
}

handlers.addPage = function(options, callback) {
  var saver = new Saver({});
  var state = saver.loadStateSync(options.output_dir);
  if (state != null) {
    console.log('Warning: State file exists in output directory.');
  }

  var output_dir_name = path.basename(options.output_dir);
  var parent_dir = path.resolve(options.output_dir, '..');

  var parent_saver = new Saver({ output_dir: parent_dir });
  var current_data = parent_saver.getStateData(options.page_url);
  if (!options.force && current_data) {
    console.log('Warning: This page already added. Append --force to override/overwrite this.');
    console.log(current_data);
    return callback();
  }

  parent_saver.updateStateData(options.page_url, { output_dir: output_dir_name });
  parent_saver.saveStateSync(parent_dir);
  console.log('Done. Added page to state file at: ' + parent_dir);
  callback();
}

handlers.enablePage = function(options, callback) {
  var saver = new Saver({});
  var state = saver.loadStateSync(options.output_dir);
  if (state != null) {
    console.log('Warning: State file exists in output directory.');
  }

  var output_dir_name = path.basename(options.output_dir);
  var parent_dir = path.resolve(options.output_dir, '..');

  var parent_saver = new Saver({ output_dir: parent_dir });
  var current_data = parent_saver.getStateData(options.page_url);
  if (!options.force && !current_data) {
    console.log('Warning: This page wasn\'t added. Append --force to continue.');
    return callback();
  }

  if (options.force) {
    parent_saver.updateStateData(options.page_url, { ignore: false, output_dir: output_dir_name });
  } else {
    parent_saver.updateStateData(options.page_url, { ignore: false });
  }
  
  parent_saver.saveStateSync(parent_dir);
  console.log('Done. Enable page to state file at: ' + parent_dir);
  callback();
}

handlers.disablePage = function(options, callback) {
  var saver = new Saver({});
  var state = saver.loadStateSync(options.output_dir);
  if (state != null) {
    console.log('Warning: State file exists in output directory.');
  }

  var output_dir_name = path.basename(options.output_dir);
  var parent_dir = path.resolve(options.output_dir, '..');

  var parent_saver = new Saver({ output_dir: parent_dir });
  var current_data = parent_saver.getStateData(options.page_url);
  if (!options.force && !current_data) {
    console.log('Warning: This page wasn\'t added. Append --force to continue.');
    return callback();
  }

  if (options.force) {
    parent_saver.updateStateData(options.page_url, { ignore: true, output_dir: output_dir_name });
  } else {
    parent_saver.updateStateData(options.page_url, { ignore: true });
  }
  
  parent_saver.saveStateSync(parent_dir);
  console.log('Done. Enable page to state file at: ' + parent_dir);
  callback();
}

handlers.downloadImage = function(options, callback) {
  var saver = new Saver(options);
  var state = saver.loadStateSync(options.output_dir);
  if (!options.force && state && state[options.page_url] && state[options.page_url].images) {
    console.log('Warning: Page already exists in output directory. ' +
      'Append --force to override/overwrite this.');
    return callback();
  }
  var output_dir_name = path.basename(options.output_dir);
  var parent_dir = path.resolve(options.output_dir, '..');

  saver.on('exit', function(err) {
    var parent_saver = new Saver({ output_dir: parent_dir });
    if (err) {
      parent_saver.updateStateData(options.page_url, {
        output_dir: output_dir_name,
        done: false,
        last_update: new Date() 
      });
    } else {
      parent_saver.updateStateData(options.page_url, {
        output_dir: output_dir_name,
        done: true,
        last_update: new Date() 
      });
    }
    parent_saver.saveStateSync(parent_dir);
    parent_saver.exit();
  });

  saver.start(options, callback);
}

handlers.downloadVideo = function(options, callback) {
  var saver = new Saver(options);
  var state = saver.loadStateSync(options.output_dir);
  if (!options.force && state && state[options.page_url] && state[options.page_url].video) {
    console.log('Warning: Page already exists in output directory. ' +
      'Append --force to override/overwrite this.');
    return callback();
  }
  var output_dir_name = path.basename(options.output_dir);
  var parent_dir = path.resolve(options.output_dir, '..');

  saver.start(options, callback);
}

handlers.runScript = function(options, callback) {  
  var saver = new Saver(options);
  var state = saver.loadStateSync(options.output_dir);
  if (!options.force && state) {
    console.log('Warning: State file exists in output directory. ' +
      'Append --force to override/overwrite this.');
    return callback();
  }
  var output_dir_name = path.basename(options.output_dir);
  var parent_dir = path.resolve(options.output_dir, '..');

  saver.on('exit', function(err) {
    var parent_saver = new Saver({ output_dir: parent_dir });
    if (err) {
      parent_saver.updateStateData(options.page_url, {
        output_dir: output_dir_name,
        done: false,
        last_update: new Date() 
      });
    } else {
      parent_saver.updateStateData(options.page_url, {
        output_dir: output_dir_name,
        done: true,
        last_update: new Date() 
      });
    }
    parent_saver.saveStateSync(parent_dir);
  });

  saver.start(options, callback);
}

var command = process.argv[2];
if (command == 'download') {
  options.download = true;

  if (process.argv.length < 5) {
    printUsage();
    process.exit();
  } else {
    var page_url = process.argv[3];
    options.page_url = page_url;
    console.log('Page URL: ' + page_url);

    var output_dir = process.argv[4];
    options.output_dir = output_dir;
    console.log('Output directory: ' + options.output_dir);

    handlers.download(options, function(err) {
      if (err) {
        console.log(err);
        process.exit();
      }
    });
  }
} else if (command == 'update') {
  options.update = true;

  if (process.argv.length < 4) {
    printUsage();
    process.exit();
  } else {
    var output_dir = process.argv[3];
    options.output_dir = output_dir;
    console.log('Output directory: ' + options.output_dir);

    handlers.update(options, function(err) {
      if (err) {
        console.log(err);
        process.exit();
      }
    });
  }
} else if (command == 'add-page') {
  options.add_page = true;

  if (process.argv.length < 5) {
    printUsage();
    process.exit();
  } else {
    var page_url = process.argv[3];
    options.page_url = page_url;
    console.log('Page URL: ' + page_url);

    var output_dir = process.argv[4];
    options.output_dir = output_dir;
    console.log('Output directory: ' + options.output_dir);

    handlers.addPage(options, function(err) {
      if (err) {
        console.log(err);
        process.exit();
      }
    });
  }
} else if (command == 'enable-page') {
  options.add_page = true;

  if (process.argv.length < 5) {
    printUsage();
    process.exit();
  } else {
    var page_url = process.argv[3];
    options.page_url = page_url;
    console.log('Page URL: ' + page_url);

    var output_dir = process.argv[4];
    options.output_dir = output_dir;
    console.log('Output directory: ' + options.output_dir);

    handlers.enablePage(options, function(err) {
      if (err) {
        console.log(err);
        process.exit();
      }
    });
  }
} else if (command == 'disable-page') {
  options.add_page = true;

  if (process.argv.length < 5) {
    printUsage();
    process.exit();
  } else {
    var page_url = process.argv[3];
    options.page_url = page_url;
    console.log('Page URL: ' + page_url);

    var output_dir = process.argv[4];
    options.output_dir = output_dir;
    console.log('Output directory: ' + options.output_dir);

    handlers.disablePage(options, function(err) {
      if (err) {
        console.log(err);
        process.exit();
      }
    });
  }
} else if (command == 'download-image') {
  options.download_image = true;

  if (process.argv.length < 5) {
    printUsage();
    process.exit();
  } else {
    var page_url = process.argv[3];
    options.page_url = page_url;
    console.log('Page URL: ' + page_url);

    var output_dir = process.argv[4];
    options.output_dir = output_dir;
    console.log('Output directory: ' + options.output_dir);

    if (process.argv.length > 5) {
      options.selector = process.argv[5];
      console.log('Selector: ' + options.selector); 
    }

    handlers.downloadImage(options, function(err) {
      if (err) {
        console.log(err);
        process.exit();
      }
    });
  }
} else if (command == 'download-video') {
  options.download_video = true;

  if (process.argv.length < 5) {
    printUsage();
    process.exit();
  } else {
    var page_url = process.argv[3];
    options.page_url = page_url;
    console.log('Page URL: ' + page_url);

    var output_dir = process.argv[4];
    options.output_dir = output_dir;
    console.log('Output directory: ' + options.output_dir);

    handlers.downloadVideo(options, function(err) {
      if (err) {
        console.log(err);
        process.exit();
      }
    });
  }
} else if (command == 'run-script') {
  options.run_script = true;

  if (process.argv.length < 6) {
    printUsage();
    process.exit();
  } else {
    options.script_file = process.argv[3];
    console.log('Script file: ' + options.script_file);

    var page_url = process.argv[4];
    options.page_url = page_url;
    console.log('Page URL: ' + page_url);

    var output_dir = process.argv[5];
    options.output_dir = output_dir;
    console.log('Output directory: ' + options.output_dir);

    handlers.runScript(options, function(err) {
      if (err) {
        console.log(err);
        process.exit();
      }
    });
  }
} else {
  printUsage();
  process.exit();
}

